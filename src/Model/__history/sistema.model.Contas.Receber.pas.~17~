unit sistema.model.Contas.Receber;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Datasnap.Provider, Data.DB, Datasnap.DBClient,
  sistema.model.conexao, FireDAC.UI.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Phys, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.VCLUI.Wait,
  sistema.model.Entidades.Conta.Pagar,
  sistema.model.Entidades.Conta.Pagar.Detalhes,
  sistema.model.Entidades.Conta.Receber,
  sistema.model.Entidades.Conta.Receber.Detalhes;

type
  TdmContasReceber = class(TDataModule)
    cdsContasReceber: TClientDataSet;
    dspContasReceber: TDataSetProvider;
    sqlContasReceber: TFDQuery;
    cdsContasReceberid: TStringField;
    cdsContasRecebernumero_documento: TStringField;
    cdsContasReceberdescricao: TStringField;
    cdsContasReceberparcela: TIntegerField;
    cdsContasRecebervalor_parcela: TFMTBCDField;
    cdsContasRecebervalor_venda: TFMTBCDField;
    cdsContasRecebervalor_abatido: TFMTBCDField;
    cdsContasReceberdata_venda: TDateField;
    cdsContasReceberdata_cadastro: TDateField;
    cdsContasReceberdata_vencimento: TDateField;
    cdsContasReceberdata_recebimento: TDateField;
    cdsContasReceberstatus: TStringField;
  private
    { Private declarations }
    procedure gravarContaReceber(ContaReceber : TModelContaReceber; SQLGravar : TFDQuery);
    procedure gravarContaReceberDetalhes(ContaReceberDetalhes : TModelContaReceberDetalhes; SQLGravar : TFDQuery);
  public
    { Public declarations }
    function GetContaReceber(ID : String) : TModelContaReceber;
    procedure BaixarContaReceber(BaixarReceber : TModelContaReceberDetalhes);
  end;

var
  dmContasReceber: TdmContasReceber;

implementation

uses
  finan.Utilitarios;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TdmContasReceber }

{ TdmContasReceber }

procedure TdmContasReceber.BaixarContaReceber(BaixarReceber: TModelContaReceberDetalhes);
var
  ContaReceber : TModelContaReceber;
  SQLGravar : TFDQuery;
  SQL : String;
begin
  ContaReceber := GetContaReceber(BaixarReceber.IdContaReceber);
  try
    if ContaReceber.ID = '' then
      raise Exception.Create('Conta a Receber não encontrado!');

    ContaReceber.ValorAbatido := ContaReceber.ValorAbatido + BaixarReceber.Valor;

    if ContaReceber.ValorAbatido >= ContaReceber.ValorParcela then
    begin
      ContaReceber.Status := 'B';
      ContaReceber.DataRecebimento := Now;
    end;

    BaixarReceber.ID := TUtilitarios.GetId;

    SQLGravar := TFDQuery.Create(nil);
    try
      SQLGravar.Connection := dmConexao.SQLConexao;
      gravarContaReceber(ContaReceber, SQLGravar);
      gravarContaReceberDetalhes(BaixarReceber, SQLGravar);
    finally
      SQLGravar.Free;
    end;

  finally
    ContaReceber.Free;
  end;

end;

function TdmContasReceber.GetContaReceber(ID: String): TModelContaReceber;
var
  SQLConsulta : TFDQuery;
begin
  SQLCOnsulta := TFDQuery.Create(nil);
  try
    SQLConsulta.Connection := dmConexao.SQLConexao;
    SQLConsulta.SQL.Clear;
    SQLConsulta.SQL.Add('SELECT * FROM CONTAS_RECEBER WHERE ID = :ID');
    SQLConsulta.ParamByName('ID').AsString := ID;
    SQLConsulta.Open;

    Result := TModelContaReceber.Create;
    try
      Result.ID := SQLConsulta.FieldByName('ID').AsString;
      Result.Documento := SQLConsulta.FieldByName('NUMERO_DOCUMENTO').AsString;
      Result.Descricao := SQLConsulta.FieldByName('DESCRICAO').AsString;
      Result.Parcela := SQLConsulta.FieldByName('PARCELA').AsInteger;
      Result.ValorParcela := SQLConsulta.FieldByName('VALOR_PARCELA').AsCurrency;
      Result.ValorVenda := SQLConsulta.FieldByName('VALOR_VENDA').AsCurrency;
      Result.ValorAbatido := SQLConsulta.FieldByName('VALOR_ABATIDO').AsCurrency;
      Result.DataVenda := SQLConsulta.FieldByName('DATA_VENDA').AsDateTime;
      Result.DataCadastro := SQLConsulta.FieldByName('DATA_CADASTRO').AsDateTime;
      Result.DataVencimento := SQLConsulta.FieldByName('DATA_VENCIMENTO').AsDateTime;
      Result.DataRecebimento := SQLConsulta.FieldByName('DATA_RECEBIMENTO').AsDateTime;
      Result.Status := SQLConsulta.FieldByName('STATUS').AsString;
    except
      Result.Free;
      raise;
    end;
  finally
    SQLConsulta.Free;
  end;
end;

procedure TdmContasReceber.gravarContaReceber(ContaReceber: TModelContaReceber; SQLGravar: TFDQuery);
var
  SQL : String;
begin
  SQL := 'UPDATE CONTAS_RECEBER SET VALOR_ABATIDO = :VALORABATIDO,' +
           ' VALOR_PARCELA = :VALORPARCELA,' +
           ' STATUS = :STATUS,' +
           ' DATA_RECEBIMENTO = :DATAPAGAMENTO' +
           ' WHERE ID = :IDCONTARECEBER;';

  SQLGravar.SQL.Clear;
  SQLGravar.Params.Clear;

  SQLGravar.SQL.Add(sql);
  SQLGravar.ParamByName('VALORABATIDO').AsCurrency := ContaReceber.ValorAbatido;
  SQLGravar.ParamByName('VALORPARCELA').AsCurrency := ContaReceber.ValorParcela;
  SQLGravar.ParamByName('STATUS').AsString := ContaReceber.Status;
  TUtilitarios.ValidarData(SQLGravar.ParamByName('DATAPAGAMENTO'), ContaReceber.DataRecebimento);
  SQLGravar.ParamByName('IDCONTARECEBER').AsString := ContaReceber.ID;

  SQLGravar.Prepare;
  SQLGravar.ExecSQL;
end;

procedure TdmContasReceber.gravarContaReceberDetalhes(ContaReceberDetalhes: TModelContaReceberDetalhes; SQLGravar: TFDQuery);
var
  SQL : String;
begin
  SQL := 'INSERT INTO CONTAS_RECEBER_DETALHES (ID, ID_CONTAS_RECEBER, DETALHES, VALOR, DATA, USUARIO) ' +
             'VALUES (:IDDETALHE, :IDCONTARECEBER, :DETALHES, :VALOR, :DATA, :USUARIO);';
  SQLGravar.SQL.Clear;
  SQLGravar.Params.Clear;

  SQLGravar.SQL.Add(sql);
  SQLGravar.ParamByName('IDDETALHE').AsString := ContaReceberDetalhes.ID;
  SQLGravar.ParamByName('IDCONTARECEBER').AsString := ContaReceberDetalhes.IdContaReceber;
  SQLGravar.ParamByName('DETALHES').AsString := ContaReceberDetalhes.Detalhes;
  SQLGravar.ParamByName('VALOR').AsCurrency := ContaReceberDetalhes.Valor;
  SQLGravar.ParamByName('DATA').AsDateTime := ContaReceberDetalhes.Data;
  SQLGravar.ParamByName('USUARIO').AsString := ContaReceberDetalhes.Usuario;

  SQLGravar.Prepare;
  SQLGravar.ExecSQL;
end;

end.
